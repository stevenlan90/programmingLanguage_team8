{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#versionOne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import sys\n",
    "import pandas as pd\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = requests.get('https://api.thevirustracker.com/free-api?countryTimeline=US')\n",
    "arr = res.json()\n",
    "items = arr['timelineitems'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "dates=list(items.keys())\n",
    "dates.remove(dates[-1])\n",
    "caseCount = [(items[key]['total_cases'])for key in items if key!='stat']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "x = dates\n",
    "y = caseCount\n",
    "plt.plot(x, y)\n",
    "plt.xlabel('date')\n",
    "plt.ylabel('case')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#versionTwo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import sys\n",
    "import pandas as pd\n",
    "import requests\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "URL = \"https://api.thevirustracker.com/free-api?countryTimeline=\"\n",
    "\n",
    "while True:\n",
    "    \n",
    "    \n",
    "\n",
    "    countryCode = input(\"please input country code: \")\n",
    "    \n",
    "    if countryCode == '0':\n",
    "        break\n",
    "\n",
    "    res = requests.get(URL + countryCode)\n",
    "\n",
    "    arr = res.json()\n",
    "    items = arr['timelineitems'][0]\n",
    "    dates=list(items.keys())\n",
    "    dates.remove(dates[-1])\n",
    "    caseCount = [(items[key]['total_cases'])for key in items if key!='stat']\n",
    "\n",
    "    x = dates\n",
    "    y = caseCount\n",
    "    plt.plot(x, y)\n",
    "    plt.xlabel('date')\n",
    "    plt.ylabel('case')\n",
    "    plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
